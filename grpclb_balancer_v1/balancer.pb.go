// Code generated by protoc-gen-gogo.
// source: grpclb_balancer_v1/balancer.proto
// DO NOT EDIT!

/*
Package grpclb_balancer_v1 is a generated protocol buffer package.

It is generated from these files:
	grpclb_balancer_v1/balancer.proto

It has these top-level messages:
	Server
	ServersRequest
	ServersResponse
*/
package grpclb_balancer_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Server struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Score   int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}

type ServersRequest struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *ServersRequest) Reset()         { *m = ServersRequest{} }
func (m *ServersRequest) String() string { return proto.CompactTextString(m) }
func (*ServersRequest) ProtoMessage()    {}

type ServersResponse struct {
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *ServersResponse) Reset()         { *m = ServersResponse{} }
func (m *ServersResponse) String() string { return proto.CompactTextString(m) }
func (*ServersResponse) ProtoMessage()    {}

func (m *ServersResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*Server)(nil), "grpclb.balancer.v1.Server")
	proto.RegisterType((*ServersRequest)(nil), "grpclb.balancer.v1.ServersRequest")
	proto.RegisterType((*ServersResponse)(nil), "grpclb.balancer.v1.ServersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for LoadBalancer service

type LoadBalancerClient interface {
	Servers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*ServersResponse, error)
}

type loadBalancerClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerClient(cc *grpc.ClientConn) LoadBalancerClient {
	return &loadBalancerClient{cc}
}

func (c *loadBalancerClient) Servers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*ServersResponse, error) {
	out := new(ServersResponse)
	err := grpc.Invoke(ctx, "/grpclb.balancer.v1.LoadBalancer/Servers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoadBalancer service

type LoadBalancerServer interface {
	Servers(context.Context, *ServersRequest) (*ServersResponse, error)
}

func RegisterLoadBalancerServer(s *grpc.Server, srv LoadBalancerServer) {
	s.RegisterService(&_LoadBalancer_serviceDesc, srv)
}

func _LoadBalancer_Servers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadBalancerServer).Servers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _LoadBalancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpclb.balancer.v1.LoadBalancer",
	HandlerType: (*LoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Servers",
			Handler:    _LoadBalancer_Servers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
