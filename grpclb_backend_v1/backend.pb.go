// Code generated by protoc-gen-gogo.
// source: grpclb_backend_v1/backend.proto
// DO NOT EDIT!

/*
Package grpclb_backend_v1 is a generated protocol buffer package.

It is generated from these files:
	grpclb_backend_v1/backend.proto

It has these top-level messages:
	LoadRequest
	LoadResponse
*/
package grpclb_backend_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoadRequest struct {
}

func (m *LoadRequest) Reset()         { *m = LoadRequest{} }
func (m *LoadRequest) String() string { return proto.CompactTextString(m) }
func (*LoadRequest) ProtoMessage()    {}

type LoadResponse struct {
	Score int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *LoadResponse) Reset()         { *m = LoadResponse{} }
func (m *LoadResponse) String() string { return proto.CompactTextString(m) }
func (*LoadResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*LoadRequest)(nil), "grpclb.backend.v1.LoadRequest")
	proto.RegisterType((*LoadResponse)(nil), "grpclb.backend.v1.LoadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for LoadReport service

type LoadReportClient interface {
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error)
}

type loadReportClient struct {
	cc *grpc.ClientConn
}

func NewLoadReportClient(cc *grpc.ClientConn) LoadReportClient {
	return &loadReportClient{cc}
}

func (c *loadReportClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := grpc.Invoke(ctx, "/grpclb.backend.v1.LoadReport/Load", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoadReport service

type LoadReportServer interface {
	Load(context.Context, *LoadRequest) (*LoadResponse, error)
}

func RegisterLoadReportServer(s *grpc.Server, srv LoadReportServer) {
	s.RegisterService(&_LoadReport_serviceDesc, srv)
}

func _LoadReport_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadReportServer).Load(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _LoadReport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpclb.backend.v1.LoadReport",
	HandlerType: (*LoadReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _LoadReport_Load_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
